/*
plug in only left hand, put in prog mode then run:
make ergodox_infinity:alex-norris:dfu-util
unplug left, plug in right put in prog mode then run:
make ergodox_infinity:alex-norris:dfu-util MASTER=right
*/

#include QMK_KEYBOARD_H
#include "debug.h"
#include "action_layer.h"
#include "version.h"

#define L0 0 // default layer
#define L1 1
#define L2 2
#define L3 3
#define L4 4

enum custom_keycodes {
  PLACEHOLDER = SAFE_RANGE, // can always be here
  EPRM,
  VRSN,
  RGB_SLD
};

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
[L0] = LAYOUT_ergodox(  // layer 0 : default
/*
 * left hand
 *    +-------+-----+-----+-----+-----+-----+-----+
 *    |       |     |     |     |     |     |     |
 *    +-------+-----+-----+-----+-----+-----+-----+
 *    |  TAB  |  Q  |  W  |  E  |  R  |  T  |  -  |
 *    +-------+-----+-----+-----+-----+-----+     |
 *    |CTL-ESC|  A  |  S  |  D  |  F  |  G  +-----+
 *    +-------+-----+-----+-----+-----+-----+     |
 *    |LSHIFT(|  Z  |  X  |  C  |  V  |  B  |     |
 *    +-+-----+-----+-----+-----+-----+-----+-----+
 *      |     |     |     | APP | TT2 |
 *      +-----+-----+-----+-----+-----+   +-----+-----+
 *                                        | TT2 |     |
 *                                  +-----+-----+-----+
 *                                  |     |     |     |
 *                                  | ALT |SHIFT+-----+
 *                                  |     |     |     |
 *                                  +-----+-----+-----+
 */
 
		KC_NO,          KC_NO,        KC_NO,        KC_NO,        KC_NO,        KC_NO, KC_NO, 
		KC_TAB,         KC_Q,         KC_W,         KC_E,         KC_R,         KC_T,  KC_MINS, 
		LCTL_T(KC_ESC), LGUI_T(KC_A), LALT_T(KC_S), LCTL_T(KC_D), LSFT_T(KC_F), KC_G,  
		KC_LSPO,        KC_Z,         KC_X,         KC_C,         KC_V,         KC_B,  KC_NO,  
		   KC_NO,       KC_NO,        KC_NO,        KC_APP,       TT(2),        
																			TT(2),	KC_NO,
																					KC_NO,
																KC_LALT,	KC_LSFT,KC_NO,
/* right hand
 *        +-----+-----+-----+-----+-----+-----+-------+
 *        |     |     |     |     |     |     |       |
 *        +-----+-----+-----+-----+-----+-----+-------+
 *        |  =  |  Y  |  U  |  I  |  O  |  P  |   \   |
 *        |     +-----+-----+-----+-----+-----+-------+
 *        +-----+  H  |  J  |  K  |  L  |  ;  |   '   |
 *        |     +-----+-----+-----+-----+-----+-------+
 *        |     |  N  |  M  |  ,  |  .  |  /  |RSHIFT)|
 *        +-----+-----+-----+-----+-----+-----+-----+-+
 *                    |BKSP | DEL |     |     |     |
 *    +-----+-----+   +-----+-----+-----+-----+-----+
 *    | RALT|RCTRL|
 *    +-----+-----+-----+
 *    | PGUP|     |     |
 *    +-----+ ENT | SPC |
 *    | PGDN|     |     |
 *    +-----+-----+-----+
 */
		KC_NO,  KC_NO,        KC_NO,        KC_NO,        KC_NO,           KC_NO,			KC_NO, 
		KC_EQL, KC_Y,         KC_U,         KC_I,         KC_O,            KC_P,			KC_BSLS, 
				KC_H,         RSFT_T(KC_J), RCTL_T(KC_K), RALT_T(KC_L),    RGUI_T(KC_SCLN), KC_QUOT, 
		KC_NO,  KC_N,         KC_M,         KC_COMM,      KC_DOT,          KC_SLSH,			KC_RSPC,
							  KC_BSPC,      KC_DEL,       KC_NO,           KC_NO,			KC_NO, 
	KC_NO, KC_F5, 
	KC_NO, 
	KC_NO, LT(3,KC_ENT), LT(1,KC_SPC)
    ),



[L1] = LAYOUT_ergodox( // layer 1 : function layers
/* left hand */
       KC_NO,   KC_NO,   KC_NO,   KC_NO,   KC_NO,   KC_NO,   KC_NO,
	   KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS,
	   KC_TRNS, KC_LGUI, KC_LALT, KC_LCTL, KC_LSFT, KC_TRNS, 
	   KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, TO(4),
	     KC_NO, KC_NO,   KC_NO,   KC_TRNS, KC_TRNS,
														KC_TRNS, KC_NO, 
																 KC_NO, 
											   KC_TRNS, KC_TRNS, KC_NO, 
	   
	  
/* right hand */
        KC_NO,   KC_NO,      KC_NO,   KC_NO,   KC_NO,   KC_NO,   KC_NO,
		KC_TRNS, KC_HOME,    KC_PGDN, KC_PGUP, KC_END,  KC_TRNS, KC_TRNS,
				 KC_LEFT,    KC_DOWN, KC_UP,   KC_RGHT, KC_ENT,  KC_TRNS,
		KC_TRNS, RCTL(KC_S), KC_UNDO, KC_CUT,  KC_COPY, KC_FIND, KC_TRNS,
							 KC_TRNS, KC_TRNS, KC_NO,   KC_NO,   KC_NO,
	KC_NO, KC_TRNS,
	KC_NO,
	KC_NO, KC_TRNS, KC_TRNS
),



[L2] = LAYOUT_ergodox(
	KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, 
	KC_TRNS, KC_PGUP, KC_UP, KC_PGDN, KC_NO, KC_NO, KC_NO, 
	KC_TRNS, KC_LEFT, KC_DOWN, KC_RGHT, KC_NO, KC_NO, 
	KC_TRNS, KC_HOME, KC_NO, KC_END, KC_NO, KC_NO, KC_NO, 
	KC_NO, KC_NO, KC_NO, KC_TRNS, KC_TRNS, 
	KC_TRNS, KC_NO, 
	KC_NO, 
	KC_TRNS, KC_TRNS, KC_NO,

	KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, 
	RESET, KC_NO, KC_P7, KC_P8, KC_P9, KC_BSPC, KC_DEL, 
	KC_NO, KC_P4, KC_P5, KC_P6, KC_ENT, KC_NO, 
	KC_NO, KC_NO, KC_P1, KC_P2, KC_P3, KC_SLSH, KC_ENT,
	KC_P0, KC_PDOT, KC_NO, KC_NO, KC_NO, 
	KC_NO, KC_TRNS, 
	KC_NO, 
	KC_NO, KC_TRNS, KC_TRNS
),



[L3] = LAYOUT_ergodox(
	KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, 
	KC_TRNS, KC_EXLM, KC_AT, KC_HASH, KC_DLR, KC_PERC, KC_F11, 
	KC_TRNS, KC_1, KC_2, KC_3, KC_4, KC_5, 
	KC_TRNS, KC_F1, KC_F2, KC_F3, KC_F4, KC_F5, KC_TRNS, 
	KC_NO, KC_NO, KC_NO, KC_TRNS, KC_TRNS, 
	KC_TRNS, KC_NO, 
	KC_NO, 
	KC_TRNS, KC_TRNS, KC_NO,
	
	KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, 
	KC_F12, KC_CIRC, KC_AMPR, KC_ASTR, KC_LPRN, KC_RPRN, KC_TRNS, 
	KC_6, KC_7, KC_8, KC_9, KC_0, KC_TRNS, 
	KC_TRNS, KC_F6, KC_F7, KC_F8, KC_F9, KC_F10, KC_TRNS, 
	KC_VOLD, KC_VOLU, KC_NO, KC_NO, KC_NO, 
	KC_NO, KC_TRNS, 
	KC_NO, 
	KC_NO, KC_TRNS, KC_MUTE
),



[L4] = LAYOUT_ergodox(
	KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, 
	KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, 
	KC_TRNS, KC_A, KC_S, KC_D, KC_F, KC_TRNS, 
	KC_LSFT, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, TO(0), 
	KC_NO, KC_NO, KC_NO, KC_LALT, KC_LCTL,
	KC_TRNS, KC_NO, 
	KC_NO, 
	KC_SPC, KC_ENT, KC_NO, 
	
	KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO,
	KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, 
	KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, 
	KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, 
	KC_TRNS, KC_TRNS, KC_NO, KC_NO, KC_NO, 
	KC_NO, KC_TRNS, 
	KC_NO, 
	KC_NO, KC_TRNS, KC_TRNS
)
};


const macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt)
{
  // MACRODOWN only works in this function
      switch(id) {
        case 0:
        if (record->event.pressed) {
          SEND_STRING (QMK_KEYBOARD "/" QMK_KEYMAP " @ " QMK_VERSION);
        }
        break;
        case 1:
        if (record->event.pressed) { // For resetting EEPROM
          eeconfig_init();
        }
        break;
      }
    return MACRO_NONE;
};

bool process_record_user(uint16_t keycode, keyrecord_t *record) {
  switch (keycode) {
    // dynamically generate these.
    case EPRM:
      if (record->event.pressed) {
        eeconfig_init();
      }
      return false;
      break;
    case VRSN:
      if (record->event.pressed) {
        SEND_STRING (QMK_KEYBOARD "/" QMK_KEYMAP " @ " QMK_VERSION);
      }
      return false;
      break;
    case RGB_SLD:
      if (record->event.pressed) {
        #ifdef RGBLIGHT_ENABLE
          rgblight_mode(1);
        #endif
      }
      return false;
      break;
  }
  return true;
}

// Runs just one time when the keyboard initializes.
void matrix_init_user(void) {

};


// Runs constantly in the background, in a loop.
void matrix_scan_user(void) {

    uint8_t layer = biton32(layer_state);

    ergodox_board_led_off();
    ergodox_right_led_1_off();
    ergodox_right_led_2_off();
    ergodox_right_led_3_off();
    switch (layer) {
      // TODO: Make this relevant to the ErgoDox EZ.
        case 1:
            ergodox_right_led_1_on();
            break;
        case 2:
            ergodox_right_led_2_on();
            break;
		case 3:
            ergodox_right_led_3_on();
            break;
		case 4:
            ergodox_right_led_1_on();
			ergodox_right_led_2_on();
            break;
        default:
            // none
            break;
    }

};


/*
#include QMK_KEYBOARD_H


const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
        [0] = LAYOUT_ergodox(KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_TAB, KC_Q, KC_W, KC_E, KC_R, KC_T, KC_MINS, LCTL_T(KC_ESC), LGUI_T(KC_A), LALT_T(KC_S), LCTL_T(KC_D), LSFT_T(KC_F), KC_G, KC_LSPO, KC_Z, KC_X, KC_C, KC_V, KC_B, KC_NO, KC_NO, KC_NO, KC_NO, KC_APP, TT(2), TT(2), KC_NO, KC_NO, KC_LALT, KC_LSFT, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_EQL, KC_Y, KC_U, KC_I, KC_O, KC_P, KC_BSLS, KC_H, RSFT_T(KC_J), RCTL_T(KC_K), RALT_T(KC_L), RGUI_T(KC_SCLN), KC_QUOT, KC_NO, KC_N, KC_M, KC_COMM, KC_DOT, KC_SLSH, KC_RSPC, KC_BSPC, KC_DEL, KC_NO, KC_NO, KC_NO, KC_NO, KC_F5, KC_NO, KC_NO, LT(3,KC_ENT), LT(1,KC_SPC)),
        [1] = LAYOUT_ergodox(KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_LGUI, KC_LALT, KC_LCTL, KC_LSFT, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, TO(4), KC_NO, KC_NO, KC_NO, KC_TRNS, KC_TRNS, KC_TRNS, KC_NO, KC_NO, KC_TRNS, KC_TRNS, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_TRNS, KC_HOME, KC_PGDN, KC_PGUP, KC_END, KC_TRNS, KC_TRNS, KC_LEFT, KC_DOWN, KC_UP, KC_RGHT, KC_ENT, KC_TRNS, KC_TRNS, RCTL(KC_S), KC_UNDO, KC_CUT, KC_COPY, KC_FIND, KC_TRNS, KC_TRNS, KC_TRNS, KC_NO, KC_NO, KC_NO, KC_NO, KC_TRNS, KC_NO, KC_NO, KC_TRNS, KC_TRNS),
        [2] = LAYOUT_ergodox(KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_TRNS, KC_PGUP, KC_UP, KC_PGDN, KC_NO, KC_NO, KC_NO, KC_TRNS, KC_LEFT, KC_DOWN, KC_RGHT, KC_NO, KC_NO, KC_TRNS, KC_HOME, KC_NO, KC_END, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_TRNS, KC_TRNS, KC_TRNS, KC_NO, KC_NO, KC_TRNS, KC_TRNS, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, RESET, KC_NO, KC_P7, KC_P8, KC_P9, KC_BSPC, KC_DEL, KC_NO, KC_P4, KC_P5, KC_P6, KC_ENT, KC_NO, KC_NO, KC_NO, KC_P1, KC_P2, KC_P3, KC_SLSH, KC_ENT, KC_P0, KC_PDOT, KC_NO, KC_NO, KC_NO, KC_NO, KC_TRNS, KC_NO, KC_NO, KC_TRNS, KC_TRNS),
        [3] = LAYOUT_ergodox(KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_TRNS, KC_EXLM, KC_AT, KC_HASH, KC_DLR, KC_PERC, KC_F11, KC_TRNS, KC_1, KC_2, KC_3, KC_4, KC_5, KC_TRNS, KC_F1, KC_F2, KC_F3, KC_F4, KC_F5, KC_TRNS, KC_NO, KC_NO, KC_NO, KC_TRNS, KC_TRNS, KC_TRNS, KC_NO, KC_NO, KC_TRNS, KC_TRNS, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_F12, KC_CIRC, KC_AMPR, KC_ASTR, KC_LPRN, KC_RPRN, KC_TRNS, KC_6, KC_7, KC_8, KC_9, KC_0, KC_TRNS, KC_TRNS, KC_F6, KC_F7, KC_F8, KC_F9, KC_F10, KC_TRNS, KC_VOLD, KC_VOLU, KC_NO, KC_NO, KC_NO, KC_NO, KC_TRNS, KC_NO, KC_NO, KC_TRNS, KC_MUTE),
        [4] = LAYOUT_ergodox(KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_A, KC_S, KC_D, KC_F, KC_TRNS, KC_LSFT, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, TO(0), KC_NO, KC_NO, KC_NO, KC_LALT, KC_LCTL, KC_TRNS, KC_NO, KC_NO, KC_SPC, KC_ENT, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_NO, KC_NO, KC_NO, KC_NO, KC_TRNS, KC_NO, KC_NO, KC_TRNS, KC_TRNS)
};
*/
